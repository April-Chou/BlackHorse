package blackhorse;

/*
 * 接口概述：
 * 狭义角度，Java中的接口
 * 广义角度， 对外提供规则的都是接口
 * 
 * 接口特点：
 * 1. 接口用interface表示
 * 
 * 2. 类实现接口用implements表示
 * 
 * 3. 接口不能实例化， 接口用的方式实例化
 * 
 * 4. 接口的子类：
 *   可以抽象类，意义不大
 *   可以具体类，要重写接口中所有的抽象方法（推荐方案）
 *   
 *   
 * 5. 接口的成员变量： 只能是常量，并且是静态的并公共的。
 *     默认修饰符public static final; 三个关键字可以互相交换位置，建议手动给出
 * 6. 构造方法
 *     接口没有构造方法
 *     
 * 7. 成员方法： 
 *      只能是抽象方法，默认修饰符 public abstract，建议手动给出
 *      
 * 接口里所有东西都是public的
 * 
 * 接口之间可以多继承，类之间不可以
 * 类与接口之间是实现关系，可以单实现，也可以多实现，并且可以继承一个类的同时实现多个接口，接口的出现打破了单继承的局限性
 * 
 * 
 * 
 * 成员区别：
 *   抽象类
 *     成员变量： 可以变量，可以常量
 *     构造方法： 有
 *     成员方法： 可以抽象，可以非抽象
 *     
 *   接口：
 *     成员变量：只可以常量
 *     构造方法： 无
 *     成员方法： 只可以抽象
 *    
 * 关系区别：
 *    类与类
 *     继承，单继承
 *    类与接口： 实现， 可以单实现也可以多实现
 *    接口与接口： 继承，可以单继承也可以多继承
 *  
 * 设计理念区别： 
 *    抽象类： 被继承体现的是 is A 的关系， 抽象类中定义的是该继承体系的共性功能
 *    接口： 被实现体现的是 like A 的关系。 接口中定义的是该继承体系的扩展功能
 *
 *     
 *
 */

interface Inter{
	public abstract void print();  //接口中的方法都是抽象类
}

public class Demo_Interface implements Inter{  //接口是干爹不是亲爹，一个类不写继承任何类，默认继承object类
	public void print() {
		
	}
	
	Inter i = new Demo_Interface();   //多态形式实例化接口。   	 父类引用指向子类对象

}
